# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GiAKElxTqwd-lcOz1fIMP9_v7JNJhjy
"""

import streamlit as st
import tensorflow as tf
import numpy as np
import pandas as pd
import joblib  # To load the saved scaler

# Load the trained model
model = tf.keras.models.load_model("energy_demand_model.h5", custom_objects={"mse": tf.keras.losses.MeanSquaredError()})

# Load the scaler used during training
scaler = joblib.load("scaler.pkl")  # Ensure you saved the original scaler using joblib

# Streamlit UI
st.title("Energy Demand Predictor")
st.write("Enter values to predict future energy consumption.")

# User Input for Features
features = []
features.append(st.number_input("Frequency (Hz)", value=50.0))
features.append(st.number_input("Coal Generation (MW)", value=1000.0))
features.append(st.number_input("Nuclear Generation (MW)", value=5000.0))
features.append(st.number_input("CCGT Generation (MW)", value=3000.0))
features.append(st.number_input("Wind Generation (MW)", value=2000.0))
features.append(st.number_input("Pumped Storage (MW)", value=500.0))
features.append(st.number_input("Hydro Generation (MW)", value=600.0))
features.append(st.number_input("Biomass Generation (MW)", value=400.0))
features.append(st.number_input("Oil Generation (MW)", value=100.0))
features.append(st.number_input("Solar Generation (MW)", value=1500.0))
features.append(st.number_input("OCGT Generation (MW)", value=50.0))
features.append(st.number_input("French ICT (MW)", value=300.0))
features.append(st.number_input("Dutch ICT (MW)", value=200.0))
features.append(st.number_input("Irish ICT (MW)", value=100.0))
features.append(st.number_input("EW ICT (MW)", value=150.0))
features.append(st.number_input("Nemo Link (MW)", value=180.0))
features.append(st.number_input("Other (MW)", value=250.0))

# Convert to NumPy array and reshape
input_data = np.array([features])

# Apply the same scaler used in training
input_data = scaler.transform(input_data)

# Debugging: Print input shape
print("Model Expected Input Shape:", model.input_shape)
print("Actual Input Shape:", input_data.shape)

# Predict button
if st.button("Predict Energy Demand"):
    prediction = model.predict(input_data)
    st.success(f"Predicted Energy Demand: {prediction[0][0]:.2f} MW")
